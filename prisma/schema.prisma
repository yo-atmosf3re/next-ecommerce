// ? Глобальное описание схемы базы данных;

// ? Генерация схемы;
generator client {
    provider = "prisma-client-js"
}

// ? Описание того с какой базой данных призме предстоит работать;
datasource db {
    // ? Тип базы данных;
    provider  = "postgresql"
    // ? Куда делать подключение;
    url       = env("POSTGRES_URL")
    directUrl = env("POSTGRES_URL_NON_POOLING")
}

/// Модель пользователя;
model User {
    // ? Указываем, что айди это число и уникальный идентификатор (@id) и по умолчанию автоматически айди будет +1 @default(autoincrement());
    id Int @id @default(autoincrement())

    fullName String
    // ? Делаем так, чтобы имейл был уникальным, иначе будет возвращаться 500ая ошибка;
    email    String    @unique
    password String
    role     UserRole  @default(USER)
    // ? Информация о том, когда пользователь подтверждён;
    verified DateTime?

    // ? В provider указывается какая социальная сеть привязана к юзеру. Данное поле создаётся в том случае, если пользователь регистрируется через социальную сеть, а если пользователь регистрируется через логин-пароль, то не создаётся;
    provider   String?
    providerId String?

    cart             Cart?
    // ? У пользователя может быть множество заказов;
    orders           Order[]
    verificationCode VerificationCode?

    // ? Указываем время создания пользователя по дефолту - прямо сейчас;
    createdAt DateTime @default(now())
    // ? Обновление пользователя;
    updatedAt DateTime @updatedAt
}

/// Модель уникальной категории товаров - пицца, комбо, закуски и так далее;
model Category {
    id       Int       @id @default(autoincrement())
    // ? Название категории должно быть уникальным;
    name     String    @unique
    // ? Указываем множественную связь категорий с продуктами;
    products Product[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

/// Модель продукта;
model Product {
    id Int @id @default(autoincrement())

    name     String
    imageUrl String

    // ? @relation - декоратор для создания и управления связями между моделями в базе данных;

    ingredients Ingredient[]
    // ? У продукта может быть множество вариаций, а вот у вариации может быть только один продукт;
    items       ProductItem[]

    // ? Указываем связь продукта с категорией. Связывыем categoryId продукта и id категории, и если они совпадают, то это будет значить, что продукт будет относиться именно к этой категории (one-to-many);
    category   Category @relation(fields: [categoryId], references: [id])
    categoryId Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

/// Модель вариации продукта;
model ProductItem {
    id Int @id @default(autoincrement())

    price     Int
    // ? Знак вопроса после типа означает, что свойство может отсутствовать в модели;
    size      Int?
    pizzaType Int?

    cartItems CartItem[]

    // ? У вариации продукта может быть только один продукт;
    product   Product @relation(fields: [productId], references: [id])
    productId Int
}

/// Модель ингредиента;
model Ingredient {
    id Int @id @default(autoincrement())

    name     String
    price    Int
    imageUrl String

    // ? Для установки связи many-to-many нужно указывать отношение между двумя моделями;
    products  Product[]
    cartItems CartItem[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

/// Модель корзины;
model Cart {
    id Int @id @default(autoincrement())

    // ? У одной корзины может быть только один пользователь, что логично;
    user   User? @relation(fields: [userId], references: [id])
    // ? Плюсом ко всему, пользоваться корзиной можно будет и без регистрации;
    userId Int?  @unique

    items CartItem[]

    // ? Для привязки корзины к незарегистрированному пользователю используем токен, хотя токен будет генерироваться в любом случае;
    token String

    // ? Итоговая цена в корзине;
    totalAmount Int @default(0)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

/// Модель товара в корзине;
model CartItem {
    id Int @id @default(autoincrement())

    cart   Cart @relation(fields: [cartId], references: [id])
    cartId Int

    productItem   ProductItem @relation(fields: [productItemId], references: [id])
    productItemId Int

    // ? Количество товаров;
    quantity Int @default(1)

    // ? Возможность добавлять дополнительные ингредиенты для товара в корзине;
    ingredients Ingredient[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

/// Модель заказа;
model Order {
    id Int @id @default(autoincrement())

    user   User? @relation(fields: [userId], references: [id])
    userId Int?

    // ? Заказ может создать неавторизованный пользователь по токену, хотя токен создаётся в любом случае;
    token String

    totalAmount Int
    status      OrderStatus
    paymentId   String?

    items Json

    fullName String
    email    String
    phone    String
    address  String
    comment  String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

/// Модель верификационного кода;
model VerificationCode {
    id Int @id @default(autoincrement())

    user   User @relation(fields: [userId], references: [id])
    userId Int  @unique

    code String

    createdAt DateTime @default(now())

    // ? Данная конструкция делает проверку на групповую уникальность - userId && code - то есть нельзя будет в момент регистрации сделать так, чтобы было два одинаковых верификационных кода - с одинаковыми айди и кодом - для разных пользователей;
    @@unique([userId, code])
}

enum OrderStatus {
    PENDING
    SUCCEEDED
    CANCELED
}

enum UserRole {
    USER
    ADMIN
}
